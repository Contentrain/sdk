// Generated by ContentrainGenerator
// Do not edit this file manually

export type Status = 'draft' | 'changed' | 'publish'

export interface BaseContentrainType {
  ID: string
  createdAt: string
  updatedAt: string
  status: Status
}

export type ModelId = 'faqitems' | 'meta-tags' | 'processes' | 'references' | 'sections' | 'services' | 'sociallinks' | 'tabitems' | 'testimonail-items' | 'workcategories' | 'workitems'

export interface IFaqItems extends BaseContentrainType {
  question: string
  answer: string
  order: number
}

export interface IMetaTags extends BaseContentrainType {
  name: string
  content: string
  description?: string
}

export interface IProcessItems extends BaseContentrainType {
  title: string
  description: string
  icon: string
}

export interface IReferences extends BaseContentrainType {
  logo: string
}

export interface ISections extends BaseContentrainType {
  title: string
  description: string
  buttontext?: string
  buttonlink?: string
  name: string
  subtitle?: string
}

export interface IServicesItems extends BaseContentrainType {
  title: string
  description?: string
  image?: string
}

export interface ISocialLinks extends BaseContentrainType {
  link: string
  icon: string
}

export interface ITabItems extends BaseContentrainType {
  link: string
  description: string
  image: string
}

export interface ITestimonailItems extends BaseContentrainType {
  name: string
  description: string
  title: string
  image: string
  'creative-work': string
  'creative-work-data'?: IWorkItems
}

export interface IWorkCategories extends BaseContentrainType {
  category: string
  order: number
}

export interface IWorkItems extends BaseContentrainType {
  title: string
  image?: string
  description: string
  link: string
  order: number
  category: string
  'category-data'?: IWorkCategories
}

// Type mapping for model IDs to their respective interfaces
export type ContentrainTypeMap = {
  'faqitems': IFaqItems
  'meta-tags': IMetaTags
  'processes': IProcessItems
  'references': IReferences
  'sections': ISections
  'services': IServicesItems
  'sociallinks': ISocialLinks
  'tabitems': ITabItems
  'testimonail-items': ITestimonailItems
  'workcategories': IWorkCategories
  'workitems': IWorkItems
}

// Relation Mappings
export type ModelRelations = {
  'testimonail-items': {
      model: 'workitems'
      type: 'one-to-one'
  }
  'workitems': {
      model: 'workcategories'
      type: 'one-to-one'
  }
}

// Available locales
export type AvailableLocale = 'en' | 'tr';

// Model specific locale types
export type ServicesLocales = 'en' | 'tr';
export type ProcessesLocales = 'en' | 'tr';
export type TabitemsLocales = 'en' | 'tr';
export type WorkitemsLocales = 'en' | 'tr';
export type WorkcategoriesLocales = 'en' | 'tr';
export type FaqitemsLocales = 'en' | 'tr';
export type SectionsLocales = 'en' | 'tr';
export type MetaTagsLocales = 'en' | 'tr';
export type TestimonailItemsLocales = 'en' | 'tr';

// Model specific locale availability
export type LocaleContentMap = {
  'services': ServicesLocales[];
  'processes': ProcessesLocales[];
  'tabitems': TabitemsLocales[];
  'workitems': WorkitemsLocales[];
  'workcategories': WorkcategoriesLocales[];
  'faqitems': FaqitemsLocales[];
  'sections': SectionsLocales[];
  'meta-tags': MetaTagsLocales[];
  'testimonail-items': TestimonailItemsLocales[];
};

// Locale validation helpers
export const isValidLocale = (locale: string): locale is AvailableLocale => {
  return ['en', 'tr'].includes(locale);
};

// Model specific locale validators
export const isValidServicesLocale = (locale: string): locale is ServicesLocales => {
  return ['en', 'tr'].includes(locale);
};
export const isValidProcessesLocale = (locale: string): locale is ProcessesLocales => {
  return ['en', 'tr'].includes(locale);
};
export const isValidTabitemsLocale = (locale: string): locale is TabitemsLocales => {
  return ['en', 'tr'].includes(locale);
};
export const isValidWorkitemsLocale = (locale: string): locale is WorkitemsLocales => {
  return ['en', 'tr'].includes(locale);
};
export const isValidWorkcategoriesLocale = (locale: string): locale is WorkcategoriesLocales => {
  return ['en', 'tr'].includes(locale);
};
export const isValidFaqitemsLocale = (locale: string): locale is FaqitemsLocales => {
  return ['en', 'tr'].includes(locale);
};
export const isValidSectionsLocale = (locale: string): locale is SectionsLocales => {
  return ['en', 'tr'].includes(locale);
};
export const isValidMetaTagsLocale = (locale: string): locale is MetaTagsLocales => {
  return ['en', 'tr'].includes(locale);
};
export const isValidTestimonailItemsLocale = (locale: string): locale is TestimonailItemsLocales => {
  return ['en', 'tr'].includes(locale);
};

// Asset types
export interface ContentrainAssetMeta {
  user: {
    name: string
    email: string
    avatar: string
  }
  createdAt: string
}

export interface ContentrainAsset {
  path: string
  mimetype: string
  size: number
  alt: string
  meta: ContentrainAssetMeta
}

export type ContentrainAssets = ContentrainAsset[]
