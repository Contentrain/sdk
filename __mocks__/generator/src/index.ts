import type { ContentrainField, ContentrainModelMetadata } from '@contentrain/types';
import fs from 'node:fs';
import path from 'node:path';
import process from 'node:process';
import { ErrorCode, FieldTypeComponentMap } from '@contentrain/types';

// Types
export interface GeneratorConfig {
  modelsDir: string
  outputDir: string
  contentDir: string
}

// Helper Functions
export function readJsonFile<T>(filePath: string): T {
  if (!fs.existsSync(filePath)) {
    throw new Error(`File not found: ${filePath}`, {
      cause: {
        code: ErrorCode.FILE_NOT_FOUND,
        path: filePath,
      },
    });
  }

  try {
    const fullPath = path.resolve(filePath);
    const fileContent = fs.readFileSync(fullPath, 'utf-8');
    return JSON.parse(fileContent) as T;
  }
  catch (error) {
    if (error instanceof SyntaxError) {
      throw new TypeError(`Invalid JSON in file: ${filePath}`, {
        cause: {
          code: ErrorCode.FILE_READ_ERROR,
          path: filePath,
          details: { originalError: error },
        },
      });
    }
    throw new Error(`Error reading file: ${filePath}`, {
      cause: {
        code: ErrorCode.FILE_READ_ERROR,
        path: filePath,
        details: { originalError: error },
      },
    });
  }
}

export class ContentrainGenerator {
  private config: GeneratorConfig;

  constructor(config?: Partial<GeneratorConfig>) {
    const defaultConfig: GeneratorConfig = {
      modelsDir: path.join(process.cwd(), 'contentrain/models'),
      outputDir: path.join(process.cwd(), 'types'),
      contentDir: path.join(process.cwd(), 'contentrain'),
    };

    const configPath = path.join(process.cwd(), 'contentrain-config.json');
    if (fs.existsSync(configPath)) {
      try {
        const fileContent = fs.readFileSync(configPath, 'utf-8');
        const fileConfig = JSON.parse(fileContent) as Partial<GeneratorConfig>;
        this.config = { ...defaultConfig, ...fileConfig, ...config };
      }
      catch (error) {
        if (error instanceof SyntaxError) {
          throw new TypeError('Invalid JSON in configuration file', {
            cause: {
              code: ErrorCode.INVALID_CONFIG,
              path: configPath,
              details: { originalError: error },
            },
          });
        }
        throw new Error('Failed to read configuration file', {
          cause: {
            code: ErrorCode.INVALID_CONFIG,
            path: configPath,
            details: { originalError: error },
          },
        });
      }
    }
    else {
      this.config = { ...defaultConfig, ...config };
    }
  }

  // Public Methods
  generate(): void {
    try {
      const modelFiles = this.getModelFiles(this.config.modelsDir);
      const modelIds = this.getModelIds(modelFiles);
      const metadata = this.getMetaData(this.config.modelsDir);
      let typeDefinitions = this.initializeTypeDefinitions(modelIds);
      const { generatedCount, skippedCount, errors, interfaceNames, updatedTypeDefinitions } = this.processModelFiles(modelFiles, this.config.modelsDir, typeDefinitions, metadata);
      typeDefinitions = updatedTypeDefinitions;
      typeDefinitions += this.finalizeTypeDefinitions(modelIds, interfaceNames, modelFiles, this.config.modelsDir, metadata);

      this.writeTypeDefinitions(this.config.outputDir, typeDefinitions, generatedCount, skippedCount, errors);
    }
    catch (error) {
      if (error instanceof Error) {
        throw error;
      }
      throw new Error('Failed to generate types', {
        cause: {
          code: ErrorCode.TYPE_GENERATION_ERROR,
          details: { originalError: error },
        },
      });
    }
  }

  // Type Generation Methods
  private initializeTypeDefinitions(modelIds: string[]): string {
    const modelIdType = `export type ModelId = ${modelIds.map(id => `'${id}'`).join(' | ')}\n\n`;
    return `// Generated by ContentrainGenerator
// Do not edit this file manually

export interface BaseContentrainType {
  ID: string
  createdAt: string
  updatedAt: string
  status: 'draft' | 'changed' | 'publish'
  scheduled: boolean
}

${modelIdType}`;
  }

  private processModelFiles(modelFiles: string[], modelsDir: string, typeDefinitions: string, metadata: ContentrainModelMetadata[]): {
    generatedCount: number
    skippedCount: number
    errors: Array<{ model: string, error: string }>
    interfaceNames: Map<string, string>
    updatedTypeDefinitions: string
  } {
    let generatedCount = 0;
    let skippedCount = 0;
    const errors: Array<{ model: string, error: string }> = [];
    const interfaceNames = new Map<string, string>();

    modelFiles.forEach((file) => {
      try {
        const modelId = path.basename(file, '.json');
        const modelPath = path.join(modelsDir, file);
        const modelContent: ContentrainField[] = readJsonFile<ContentrainField[]>(modelPath) || [];
        const modelMetadata: ContentrainModelMetadata | undefined = metadata.find(m => m.modelId === modelId);
        const modelName = modelMetadata?.name || modelId;

        // Validasyonlar
        this.checkDuplicateFields(modelContent, modelName);
        this.validateModelStructure(modelContent, modelId);
        this.validateRelations(modelContent, metadata);

        const interfaceName = this.formatInterfaceName({
          name: modelName,
          modelId,
          fields: modelContent,
          localization: false,
          type: 'JSON',
          createdBy: '',
          isServerless: false,
        });
        const relations = this.extractRelations(modelContent, metadata);
        const typeDefinition = this.generateTypeForModel(modelContent, relations);
        typeDefinitions += `export interface ${interfaceName} extends BaseContentrainType ${typeDefinition}\n\n`;
        interfaceNames.set(modelId, interfaceName);
        generatedCount++;
        console.log(`✓ Generated interface for ${interfaceName}`);
      }
      catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        errors.push({ model: file, error: errorMessage });
        skippedCount++;
        console.error('\x1B[31m%s\x1B[0m', `✗ Error in ${file}: ${errorMessage}`);
      }
    });

    return { generatedCount, skippedCount, errors, interfaceNames, updatedTypeDefinitions: typeDefinitions };
  }

  private finalizeTypeDefinitions(
    modelIds: string[],
    interfaceNames: Map<string, string>,
    modelFiles: string[],
    modelsDir: string,
    metadata: ContentrainModelMetadata[],
  ): string {
    let typeDefinitions = '';

    // Metadata export
    typeDefinitions += this.generateMetadataExport(metadata);

    // Validation ve Option tipleri
    typeDefinitions += this.generateValidationAndOptionTypes();

    // ContentrainTypeMap
    const typeMapEntries = modelIds.map(id => `  '${id}': ${interfaceNames.get(id)}`).join('\n');
    typeDefinitions += `\n// Type mapping for model IDs to their respective interfaces\nexport type ContentrainTypeMap = {\n${typeMapEntries}\n}\n`;

    // Relations
    typeDefinitions += this.generateRelationMapping(modelFiles, modelsDir);

    // Locales
    typeDefinitions += this.generateLocaleContentMap(metadata);

    // Assets
    typeDefinitions += this.generateAssetTypes();

    // ContentrainTypes interface ve helper types
    typeDefinitions += this.generateContentrainTypesInterface(modelIds, interfaceNames);

    return typeDefinitions;
  }

  // Type Generation Helper Methods
  private generateTypeForModel(modelFields: ContentrainField[], relations: Record<string, { model: string, type: string, modelName: string }>): string {
    let typeDefinition = '{\n';

    // Normal fields
    modelFields.forEach((field) => {
      if (field.fieldType !== 'relation' && !['ID', 'createdAt', 'updatedAt', 'status'].includes(field.fieldId)) {
        const fieldType = this.determineTypeScriptType(field);
        const isRequired = this.isFieldRequired(field);
        typeDefinition += `  ${this.formatPropertyName(field.fieldId)}${isRequired ? '' : '?'}: ${fieldType}\n`;
      }
    });

    // Relations
    if (relations) {
      Object.entries(relations).forEach(([fieldId, relation]) => {
        const relatedModelName = `I${this.formatTypeName(relation.modelName)}`;
        const isOneToOne = relation.type === 'one-to-one';
        const isRequired = modelFields.find(f => f.fieldId === fieldId)?.validations?.['required-field']?.value === true;
        typeDefinition += `  ${this.formatPropertyName(fieldId)}${isRequired ? '' : '?'}: ${isOneToOne ? 'string' : 'string[]'}\n`;
        const dataField = `'${fieldId}-data'`;
        typeDefinition += `  ${dataField}?: ${isOneToOne ? relatedModelName : `${relatedModelName}[]`}\n`;
      });
    }

    typeDefinition += '}';
    return typeDefinition;
  }

  private generateRelationMapping(modelFiles: string[], modelsDir: string): string {
    const relationMap: Record<string, Record<string, { model: string, type: 'one-to-one' | 'one-to-many' }>> = {};

    modelFiles.forEach((file) => {
      const modelId = path.basename(file, '.json');
      const modelPath = path.join(modelsDir, file);
      const modelFields: ContentrainField[] = readJsonFile<ContentrainField[]>(modelPath) || [];

      const modelRelations: Record<string, { model: string, type: 'one-to-one' | 'one-to-many' }> = {};

      modelFields
        .filter(field => field.fieldType === 'relation')
        .forEach((field) => {
          if (field.options.reference) {
            const relatedModelId = field.options.reference.form.reference.value;
            modelRelations[field.fieldId] = {
              model: relatedModelId,
              type: field.componentId === 'one-to-one' ? 'one-to-one' : 'one-to-many',
            };
          }
        });

      if (Object.keys(modelRelations).length > 0) {
        relationMap[modelId] = modelRelations;
      }
    });

    let typeDefinitions = '\n// Relation Mappings\n';
    typeDefinitions += 'export type ModelRelations = {\n';
    Object.entries(relationMap).forEach(([modelId, relations]) => {
      typeDefinitions += `  '${modelId}': {\n`;
      Object.entries(relations).forEach(([fieldId, relation]) => {
        typeDefinitions += `    '${fieldId}': {\n`;
        typeDefinitions += `      model: '${relation.model}'\n`;
        typeDefinitions += `      type: '${relation.type}'\n`;
        typeDefinitions += '    }\n';
      });
      typeDefinitions += '  }\n';
    });
    typeDefinitions += '} & {\n';
    typeDefinitions += '  [K in keyof ContentrainTypeMap]: {\n';
    typeDefinitions += '    [R: string]: {\n';
    typeDefinitions += '      model: keyof ContentrainTypeMap\n';
    typeDefinitions += '      type: \'one-to-one\' | \'one-to-many\'\n';
    typeDefinitions += '    }\n';
    typeDefinitions += '  }\n';
    typeDefinitions += '}\n';
    return typeDefinitions;
  }

  private generateLocaleContentMap(metadata: ContentrainModelMetadata[]): string {
    let typeDefinitions = '\n// Available locales\n';
    typeDefinitions += 'export type AvailableLocale = \'en\' | \'tr\';\n\n';

    // Model specific locale types
    typeDefinitions += '// Model specific locale types\n';
    metadata.filter(model => model.localization).forEach((model) => {
      typeDefinitions += `export type ${this.formatTypeName(model.modelId)}Locales = 'en' | 'tr';\n`;
    });
    typeDefinitions += '\n';

    // Model specific locale map
    typeDefinitions += '// Model specific locale availability\n';
    typeDefinitions += 'export type LocaleContentMap = {\n';
    metadata.filter(model => model.localization).forEach((model) => {
      typeDefinitions += `  '${model.modelId}': ${this.formatTypeName(model.modelId)}Locales[];\n`;
    });
    typeDefinitions += '};\n\n';

    // Locale validation helper
    typeDefinitions += '// Locale validation helper\n';
    typeDefinitions += 'export const modelLocales: Record<string, Record<string, boolean>> = {};\n\n';
    typeDefinitions += 'export const isValidLocale = <K extends keyof ContentrainTypeMap>(\n';
    typeDefinitions += '  modelId: K,\n';
    typeDefinitions += '  locale: string\n';
    typeDefinitions += '): locale is QueryLocale<K> => {\n';
    typeDefinitions += '  const model = contentrainMetadata[modelId] as { localization?: boolean };\n';
    typeDefinitions += '  if (!model?.localization) return false;\n';
    typeDefinitions += '  const availableLocales = Object.keys(modelLocales[modelId] || {});\n';
    typeDefinitions += '  return availableLocales.includes(locale);\n';
    typeDefinitions += '};\n';

    return typeDefinitions;
  }

  private generateAssetTypes(): string {
    return `\n// Asset types
export interface ContentrainAssetMeta {
  user: {
    name: string
    email: string
    avatar: string
  }
  createdAt: string
}

export interface ContentrainAsset {
  path: string
  mimetype: string
  size: number
  alt: string
  meta: ContentrainAssetMeta
}

export type ContentrainAssets = ContentrainAsset[]\n`;
  }

  private generateValidationAndOptionTypes(): string {
    return `
// Base Field Type
export interface ContentrainField {
  name: string
  fieldId: string
  componentId: string
  fieldType: 'string' | 'number' | 'boolean' | 'array' | 'date' | 'media' | 'relation'
  options: ContentrainFieldOptions
  validations: ContentrainValidations
  system?: boolean
  defaultField?: boolean
  modelId: string
}

// Field Validation Types
export interface ContentrainValidation {
  value: boolean;
  message?: string;
}

export interface ContentrainValidations {
  'required-field'?: ContentrainValidation;
  'unique-field'?: ContentrainValidation;
  'min-length'?: ContentrainValidation & { minLength: number };
  'max-length'?: ContentrainValidation & { maxLength: number };
}

// Field Option Types
export interface ContentrainTitleFieldOption {
  value: boolean;
}

export interface ContentrainDefaultValueOption<T> {
  value: boolean;
  form: {
    [K: string]: {
      value: T;
    };
  };
}

export interface ContentrainReferenceOption {
  value: boolean;
  form: {
    reference: {
      value: string;
    };
  };
}

export interface ContentrainFieldOptions {
  'title-field'?: ContentrainTitleFieldOption;
  'default-value'?: ContentrainDefaultValueOption<string | number | boolean>;
  'reference'?: ContentrainReferenceOption;
}

// Enhanced Field Type
export interface ContentrainFieldDefinition extends Omit<ContentrainField, 'options' | 'validations'> {
  validations?: ContentrainValidations;
  options?: ContentrainFieldOptions;
}
`;
  }

  private generateContentrainTypesInterface(_modelIds: string[], _interfaceNames: Map<string, string>): string {
    return `
// ContentrainTypes interface for Query package compatibility
export interface ContentrainTypes {
  models: ContentrainTypeMap
  relations: ModelRelations
  locales: AvailableLocale
}

// Helper types for Query package
export type QueryModel<K extends keyof ContentrainTypeMap> = ContentrainTypeMap[K]

export type RelationField<K extends keyof ModelRelations> = {
  [R in keyof ModelRelations[K]]: {
    model: keyof ContentrainTypeMap
    type: 'one-to-one' | 'one-to-many'
  }
}

export type QueryRelation<
  K extends keyof ModelRelations,
  R extends keyof ModelRelations[K]
> = RelationField<K>[R]

export type QueryLocale<K extends keyof ContentrainTypeMap> = K extends keyof LocaleContentMap
  ? LocaleContentMap[K][number]
  : never

// Query builder helpers
export const createContentrainQuery = {
  forModel<K extends keyof ContentrainTypeMap>(modelId: K) {
    return {
      modelId,
      type: {} as ContentrainTypeMap[K]
    }
  }
} as const

// Type validation helpers
export const isValidModel = (modelId: string): modelId is keyof ContentrainTypeMap => {
  return modelId in contentrainMetadata
}

export const isValidRelation = <K extends keyof ContentrainTypeMap>(
  modelId: K,
  relation: string
): relation is Extract<keyof ModelRelations[K], string> => {
  const model = contentrainMetadata[modelId] as { relations?: Record<string, unknown> }
  return Boolean(model?.relations?.[relation])
}

// Type utilities
export type ExtractRelationModel<
  K extends keyof ModelRelations,
  R extends keyof ModelRelations[K]
> = ContentrainTypeMap[ModelRelations[K][R]['model'] & keyof ContentrainTypeMap]

export type ExtractRelationType<
  K extends keyof ModelRelations,
  R extends keyof ModelRelations[K]
> = RelationField<K>[R]['type']
`;
  }

  // Utility Methods
  private getModelFiles(modelsDir: string): string[] {
    try {
      return fs.readdirSync(modelsDir).filter(file => file.endsWith('.json') && file !== 'metadata.json');
    }
    catch (error) {
      throw new Error(`Failed to read models directory: ${modelsDir}`, {
        cause: {
          code: ErrorCode.FILE_READ_ERROR,
          path: modelsDir,
          details: { originalError: error },
        },
      });
    }
  }

  private getModelIds(modelFiles: string[]): string[] {
    return modelFiles.map(file => path.basename(file, '.json'));
  }

  private getMetaData(modelsDir: string): ContentrainModelMetadata[] {
    try {
      const metadataPath = path.join(modelsDir, 'metadata.json');
      if (!fs.existsSync(metadataPath)) {
        throw new Error(`Metadata file not found at ${metadataPath}`, {
          cause: {
            code: ErrorCode.MODEL_NOT_FOUND,
            path: metadataPath,
          },
        });
      }
      return readJsonFile<ContentrainModelMetadata[]>(metadataPath);
    }
    catch (error) {
      if (error instanceof Error && error.cause) {
        throw error;
      }
      throw new Error('Failed to read metadata', {
        cause: {
          code: ErrorCode.FILE_READ_ERROR,
          path: path.join(modelsDir, 'metadata.json'),
          details: { originalError: error },
        },
      });
    }
  }

  // Type Conversion Methods
  private determineTypeScriptType(field: ContentrainField): string {
    if (field.fieldId === 'status')
      return '\'draft\' | \'changed\' | \'publish\'';
    if (field.componentId === 'checkbox')
      return 'boolean';
    if (field.fieldType === 'relation') {
      return field.componentId === 'one-to-one' ? 'string' : 'string[]';
    }

    const typeMap: Record<string, string> = {
      'string': 'string',
      'number': 'number',
      'boolean': 'boolean',
      'date': 'string',
      'date-time': 'string',
      'media': 'string',
      'json': 'string',
      'md-editor': 'string',
      'rich-text-editor': 'string',
      'switch': 'boolean',
      'one-to-one': 'string',
      'one-to-many': 'string',
    };

    if (field.fieldType === 'array' && field.componentId && (FieldTypeComponentMap.array as readonly string[]).includes(field.componentId)) {
      const arrayTypeMap: Record<string, string> = {
        'single-line-text': 'string[]',
        'multi-line-text': 'string[]',
        'email': 'string[]',
        'url': 'string[]',
        'slug': 'string[]',
        'color': 'string[]',
        'integer': 'number[]',
        'decimal': 'number[]',
        'rating': 'number[]',
        'percent': 'number[]',
        'phone-number': 'number[]',
      };
      return arrayTypeMap[field.componentId] || 'any[]';
    }

    return typeMap[field.fieldType] || 'unknown';
  }

  // String Manipulation Methods
  private formatInterfaceName(metadata: ContentrainModelMetadata): string {
    if (!metadata.name && !metadata.modelId) {
      throw new Error('Model must have either name or modelId');
    }
    const baseName = metadata.name || metadata.modelId;
    return `I${baseName.replace(/\s+/g, '').replace(/-./g, x => x[1].toUpperCase())}`;
  }

  private formatPropertyName(name: string): string {
    return name.includes('-') ? `'${name}'` : name;
  }

  private formatTypeName(str: string): string {
    return str
      .split(/[-\s]+/)
      .map(part => this.capitalizeFirstLetter(part))
      .join('');
  }

  private capitalizeFirstLetter(str: string): string {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }

  // Validation Methods
  private checkDuplicateFields(modelFields: ContentrainField[], modelName: string): void {
    const fieldIds = new Set();
    const duplicates: string[] = [];
    modelFields.forEach((field) => {
      if (fieldIds.has(field.fieldId)) {
        duplicates.push(field.fieldId);
      }
      fieldIds.add(field.fieldId);
    });
    if (duplicates.length > 0) {
      throw new Error(`Duplicate fields found in model '${modelName}': ${duplicates.join(', ')}`, {
        cause: {
          code: ErrorCode.MODEL_VALIDATION_ERROR,
          details: { duplicateFields: duplicates },
        },
      });
    }
  }

  private isFieldRequired(field: ContentrainField): boolean {
    return field.validations?.['required-field']?.value === true;
  }

  private extractRelations(modelContent: ContentrainField[], modelMetadata: ContentrainModelMetadata[]): Record<string, { model: string, type: string, modelName: string }> {
    if (!modelMetadata || !modelContent) {
      throw new Error('Model metadata and content are required to extract relations', {
        cause: {
          code: ErrorCode.MODEL_VALIDATION_ERROR,
          details: {
            hasMetadata: !!modelMetadata,
            hasContent: !!modelContent,
          },
        },
      });
    }

    return modelContent
      .filter((field: ContentrainField) => field.fieldType === 'relation' && field.options.reference)
      .reduce((acc: Record<string, { model: string, type: string, modelName: string }>, field: ContentrainField) => {
        if (field.options.reference) {
          const relatedModelId = field.options.reference.form.reference.value;
          const relatedModelName = modelMetadata.find(m => m.modelId === relatedModelId)?.name || '';
          acc[field.fieldId] = {
            model: relatedModelId,
            type: field.componentId,
            modelName: relatedModelName,
          };
        }
        return acc;
      }, {});
  }

  // File System Methods
  private writeTypeDefinitions(outputDir: string, typeDefinitions: string, generatedCount: number, skippedCount: number, errors: any[]): void {
    try {
      const outputPath = path.resolve(outputDir);

      if (!fs.existsSync(outputPath)) {
        fs.mkdirSync(outputPath, { recursive: true });
      }

      let finalPath: string;
      if (outputPath.endsWith('.ts')) {
        finalPath = outputPath;
        const dir = path.dirname(outputPath);
        if (!fs.existsSync(dir)) {
          fs.mkdirSync(dir, { recursive: true });
        }
      }
      else {
        finalPath = path.join(outputPath, 'contentrain.ts');
      }

      fs.writeFileSync(finalPath, typeDefinitions);
      this.logGenerationSummary(generatedCount, skippedCount, errors, finalPath);
    }
    catch (error) {
      throw new Error('Failed to write type definitions', {
        cause: {
          code: ErrorCode.FILE_WRITE_ERROR,
          details: { originalError: error },
        },
      });
    }
  }

  private logGenerationSummary(generatedCount: number, skippedCount: number, errors: any[], outputPath: string): void {
    console.log('\n\x1B[36m%s\x1B[0m', 'Generation Summary:');
    console.log('\x1B[36m%s\x1B[0m', '-----------------------------------');
    console.log('\x1B[32m%s\x1B[0m', `✓ Successfully generated ${generatedCount} interfaces`);

    if (skippedCount > 0) {
      console.log('\x1B[31m%s\x1B[0m', `✗ Skipped ${skippedCount} models due to errors`);
      console.log('\n\x1B[31m%s\x1B[0m', 'Errors:');
      errors.forEach(({ model, error }) => {
        console.log('\x1B[31m%s\x1B[0m', `  - ${model}: ${error}`);
      });
    }

    console.log('\n\x1B[32m%s\x1B[0m', `✨ Type definitions generated successfully in ${outputPath}`);
  }

  private generateMetadataExport(metadata: ContentrainModelMetadata[]): string {
    // Metadata'yı model ID'lerine göre map'leyelim
    const metadataMap = metadata.reduce((acc, model) => {
      acc[model.modelId] = model;
      return acc;
    }, {} as Record<string, ContentrainModelMetadata>);

    return `
// Contentrain Metadata
export const contentrainMetadata = ${JSON.stringify(metadataMap, null, 2)} as const;

// Metadata type definitions
export type ContentrainMetadata = typeof contentrainMetadata;
export type ModelMetadata<T extends keyof ContentrainMetadata> = ContentrainMetadata[T];
export type ContentrainModelIds = keyof ContentrainMetadata;
`;
  }

  private validateModelStructure(model: ContentrainField[], modelId: string): void {
    // Base alanların kontrolü
    const requiredFields = ['ID', 'createdAt', 'updatedAt', 'status'];
    const modelFields = model.map(f => f.fieldId);

    const missingFields = requiredFields.filter(
      field => !modelFields.includes(field),
    );

    if (missingFields.length > 0) {
      throw new Error(
        `Model '${modelId}' is missing required fields: ${missingFields.join(', ')}`,
        {
          cause: {
            code: ErrorCode.MODEL_VALIDATION_ERROR,
            details: { missingFields },
          },
        },
      );
    }
  }

  private validateRelations(modelFields: ContentrainField[], metadata: ContentrainModelMetadata[]): void {
    const relationFields = modelFields.filter(field => field.fieldType === 'relation');

    relationFields.forEach((field) => {
      if (!field.options.reference?.form?.reference?.value) {
        throw new Error(`Invalid relation configuration in field '${field.fieldId}': missing reference value`, {
          cause: {
            code: ErrorCode.MODEL_VALIDATION_ERROR,
            details: { field: field.fieldId },
          },
        });
      }

      const relatedModelId = field.options.reference.form.reference.value;
      const relatedModel = metadata.find(m => m.modelId === relatedModelId);

      if (!relatedModel) {
        throw new Error(`Invalid relation in field '${field.fieldId}': referenced model '${relatedModelId}' not found`, {
          cause: {
            code: ErrorCode.MODEL_VALIDATION_ERROR,
            details: { field: field.fieldId, referencedModel: relatedModelId },
          },
        });
      }

      if (field.componentId !== 'one-to-one' && field.componentId !== 'one-to-many') {
        throw new Error(`Invalid relation type in field '${field.fieldId}': must be 'one-to-one' or 'one-to-many'`, {
          cause: {
            code: ErrorCode.MODEL_VALIDATION_ERROR,
            details: { field: field.fieldId, type: field.componentId },
          },
        });
      }
    });
  }
}
