// Generated by ContentrainGenerator
// Do not edit this file manually

export interface BaseContentrainType {
  ID: string
  createdAt: string
  updatedAt: string
  status: 'draft' | 'changed' | 'publish'
  scheduled: boolean
}

export type ModelId = 'faqitems' | 'meta-tags' | 'processes' | 'references' | 'sections' | 'services' | 'sociallinks' | 'tabitems' | 'testimonail-items' | 'workcategories' | 'workitems'

export interface IFaqItems extends BaseContentrainType {
  question: string
  answer: string
  order: number
}

export interface IMetaTags extends BaseContentrainType {
  name: string
  content: string
  description?: string
}

export interface IProcessItems extends BaseContentrainType {
  title: string
  description: string
  icon: string
}

export interface IReferences extends BaseContentrainType {
  logo: string
}

export interface ISections extends BaseContentrainType {
  title: string
  description: string
  buttontext?: string
  buttonlink?: string
  name: string
  subtitle?: string
}

export interface IServicesItems extends BaseContentrainType {
  title: string
  description?: string
  image?: string
}

export interface ISocialLinks extends BaseContentrainType {
  link: string
  icon: string
}

export interface ITabItems extends BaseContentrainType {
  link: string
  description: string
  image: string
}

export interface ITestimonailItems extends BaseContentrainType {
  name: string
  description: string
  title: string
  image: string
  'creative-work': string
  'creative-work-data'?: IWorkItems
}

export interface IWorkCategories extends BaseContentrainType {
  category: string
  order: number
}

export interface IWorkItems extends BaseContentrainType {
  title: string
  image?: string
  description: string
  link: string
  order: number
  category: string
  'category-data'?: IWorkCategories
}


// Contentrain Metadata
export const contentrainMetadata = {
  "services": {
    "name": "ServicesItems",
    "modelId": "services",
    "localization": true,
    "type": "JSON",
    "createdBy": "user",
    "isServerless": false
  },
  "processes": {
    "name": "ProcessItems",
    "modelId": "processes",
    "localization": true,
    "type": "JSON",
    "createdBy": "user",
    "isServerless": false
  },
  "tabitems": {
    "name": "TabItems",
    "modelId": "tabitems",
    "localization": true,
    "type": "JSON",
    "createdBy": "user",
    "isServerless": false
  },
  "workitems": {
    "name": "WorkItems",
    "modelId": "workitems",
    "localization": true,
    "type": "JSON",
    "createdBy": "user",
    "isServerless": false
  },
  "workcategories": {
    "name": "WorkCategories",
    "modelId": "workcategories",
    "localization": true,
    "type": "JSON",
    "createdBy": "user",
    "isServerless": false
  },
  "faqitems": {
    "name": "FaqItems",
    "modelId": "faqitems",
    "localization": true,
    "type": "JSON",
    "createdBy": "user",
    "isServerless": false
  },
  "sections": {
    "name": "Sections",
    "modelId": "sections",
    "localization": true,
    "type": "JSON",
    "createdBy": "user",
    "isServerless": false
  },
  "sociallinks": {
    "name": "SocialLinks",
    "modelId": "sociallinks",
    "localization": false,
    "type": "JSON",
    "createdBy": "user",
    "isServerless": false
  },
  "references": {
    "name": "References",
    "modelId": "references",
    "localization": false,
    "type": "JSON",
    "createdBy": "user",
    "isServerless": false
  },
  "meta-tags": {
    "name": "MetaTags",
    "modelId": "meta-tags",
    "localization": true,
    "type": "JSON",
    "createdBy": "user",
    "isServerless": false
  },
  "testimonail-items": {
    "name": "Testimonail Items",
    "modelId": "testimonail-items",
    "localization": true,
    "type": "JSON",
    "createdBy": "user",
    "isServerless": false
  }
} as const;

// Metadata type definitions
export type ContentrainMetadata = typeof contentrainMetadata;
export type ModelMetadata<T extends keyof ContentrainMetadata> = ContentrainMetadata[T];
export type ContentrainModelIds = keyof ContentrainMetadata;

// Base Field Type
export interface ContentrainField {
  name: string
  fieldId: string
  componentId: string
  fieldType: 'string' | 'number' | 'boolean' | 'array' | 'date' | 'media' | 'relation'
  options: ContentrainFieldOptions
  validations: ContentrainValidations
  system?: boolean
  defaultField?: boolean
  modelId: string
}

// Field Validation Types
export interface ContentrainValidation {
  value: boolean;
  message?: string;
}

export interface ContentrainValidations {
  'required-field'?: ContentrainValidation;
  'unique-field'?: ContentrainValidation;
  'min-length'?: ContentrainValidation & { minLength: number };
  'max-length'?: ContentrainValidation & { maxLength: number };
}

// Field Option Types
export interface ContentrainTitleFieldOption {
  value: boolean;
}

export interface ContentrainDefaultValueOption<T> {
  value: boolean;
  form: {
    [K: string]: {
      value: T;
    };
  };
}

export interface ContentrainReferenceOption {
  value: boolean;
  form: {
    reference: {
      value: string;
    };
  };
}

export interface ContentrainFieldOptions {
  'title-field'?: ContentrainTitleFieldOption;
  'default-value'?: ContentrainDefaultValueOption<string | number | boolean>;
  'reference'?: ContentrainReferenceOption;
}

// Enhanced Field Type
export interface ContentrainFieldDefinition extends Omit<ContentrainField, 'options' | 'validations'> {
  validations?: ContentrainValidations;
  options?: ContentrainFieldOptions;
}

// Type mapping for model IDs to their respective interfaces
export type ContentrainTypeMap = {
  'faqitems': IFaqItems
  'meta-tags': IMetaTags
  'processes': IProcessItems
  'references': IReferences
  'sections': ISections
  'services': IServicesItems
  'sociallinks': ISocialLinks
  'tabitems': ITabItems
  'testimonail-items': ITestimonailItems
  'workcategories': IWorkCategories
  'workitems': IWorkItems
}

// Relation Mappings
export type ModelRelations = {
  'testimonail-items': {
    'creative-work': {
      model: 'workitems'
      type: 'one-to-one'
    }
  }
  'workitems': {
    'category': {
      model: 'workcategories'
      type: 'one-to-one'
    }
  }
} & {
  [K in keyof ContentrainTypeMap]: {
    [R: string]: {
      model: keyof ContentrainTypeMap
      type: 'one-to-one' | 'one-to-many'
    }
  }
}

// Available locales
export type AvailableLocale = 'en' | 'tr';

// Model specific locale types
export type ServicesLocales = 'en' | 'tr';
export type ProcessesLocales = 'en' | 'tr';
export type TabitemsLocales = 'en' | 'tr';
export type WorkitemsLocales = 'en' | 'tr';
export type WorkcategoriesLocales = 'en' | 'tr';
export type FaqitemsLocales = 'en' | 'tr';
export type SectionsLocales = 'en' | 'tr';
export type MetaTagsLocales = 'en' | 'tr';
export type TestimonailItemsLocales = 'en' | 'tr';

// Model specific locale availability
export type LocaleContentMap = {
  'services': ServicesLocales[];
  'processes': ProcessesLocales[];
  'tabitems': TabitemsLocales[];
  'workitems': WorkitemsLocales[];
  'workcategories': WorkcategoriesLocales[];
  'faqitems': FaqitemsLocales[];
  'sections': SectionsLocales[];
  'meta-tags': MetaTagsLocales[];
  'testimonail-items': TestimonailItemsLocales[];
};

// Locale validation helper
export const modelLocales: Record<string, Record<string, boolean>> = {};

export const isValidLocale = <K extends keyof ContentrainTypeMap>(
  modelId: K,
  locale: string
): locale is QueryLocale<K> => {
  const model = contentrainMetadata[modelId] as { localization?: boolean };
  if (!model?.localization) return false;
  const availableLocales = Object.keys(modelLocales[modelId] || {});
  return availableLocales.includes(locale);
};

// Asset types
export interface ContentrainAssetMeta {
  user: {
    name: string
    email: string
    avatar: string
  }
  createdAt: string
}

export interface ContentrainAsset {
  path: string
  mimetype: string
  size: number
  alt: string
  meta: ContentrainAssetMeta
}

export type ContentrainAssets = ContentrainAsset[]

// ContentrainTypes interface for Query package compatibility
export interface ContentrainTypes {
  models: ContentrainTypeMap
  relations: ModelRelations
  locales: AvailableLocale
}

// Helper types for Query package
export type QueryModel<K extends keyof ContentrainTypeMap> = ContentrainTypeMap[K]

export type RelationField<K extends keyof ModelRelations> = {
  [R in keyof ModelRelations[K]]: {
    model: keyof ContentrainTypeMap
    type: 'one-to-one' | 'one-to-many'
  }
}

export type QueryRelation<
  K extends keyof ModelRelations,
  R extends keyof ModelRelations[K]
> = RelationField<K>[R]

export type QueryLocale<K extends keyof ContentrainTypeMap> = K extends keyof LocaleContentMap
  ? LocaleContentMap[K][number]
  : never

// Query builder helpers
export const createContentrainQuery = {
  forModel<K extends keyof ContentrainTypeMap>(modelId: K) {
    return {
      modelId,
      type: {} as ContentrainTypeMap[K]
    }
  }
} as const

// Type validation helpers
export const isValidModel = (modelId: string): modelId is keyof ContentrainTypeMap => {
  return modelId in contentrainMetadata
}

export const isValidRelation = <K extends keyof ContentrainTypeMap>(
  modelId: K,
  relation: string
): relation is Extract<keyof ModelRelations[K], string> => {
  const model = contentrainMetadata[modelId] as { relations?: Record<string, unknown> }
  return Boolean(model?.relations?.[relation])
}

// Type utilities
export type ExtractRelationModel<
  K extends keyof ModelRelations,
  R extends keyof ModelRelations[K]
> = ContentrainTypeMap[ModelRelations[K][R]['model'] & keyof ContentrainTypeMap]

export type ExtractRelationType<
  K extends keyof ModelRelations,
  R extends keyof ModelRelations[K]
> = RelationField<K>[R]['type']
